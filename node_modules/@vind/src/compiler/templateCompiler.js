import { evaluateJSExpression } from '../../utils/evaluateJSExpression.js'
import { replaceInterpolationMarkers } from '../../utils/formatTemplate.js'
import { bindForDirective } from './../compiler/directives/for.js'
import { bindIfDirective } from './../compiler/directives/if.js'
import { mountStyling } from '../../src/compiler/mountStyling.js'
import { getTranslatedAttributeNames, translateBindingAttribute, translateEventAttribute } from '../../utils/getTranslatedAttributeNames.js'
import { reactiveVariable } from '../../reactivity/reactiveVariable.js'
import {
    REACTIVE_VARIABLE_REF_CONFIG,
    REACTIVE_VARIABLE_COMPUTED_CONFIG,
    REACTIVE_VARIABLE_PROP_CONFIG,
    LIFECYCLE_CALLBACKS_TEMPLATE
} from '../../configuration/configuration.js'
// import { getComponentModule } from '../../../../ideas/no_return.js'

function camelToKebabCase(string) {
    return string.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}

export function compileComponent(componentFunction = () => { }, componentParentNode = {}, parentContext = {}, componentName = '') {
    componentParentNode.$VindComponent ??= {}
    componentParentNode.$VindComponent.properties ??= {}

    const upperCaseComponentName = componentName.toUpperCase()

    const lifecycleCallbacks = structuredClone(LIFECYCLE_CALLBACKS_TEMPLATE)
    const properties = componentParentNode.$VindComponent.properties

    // * Defining component's destructurable properties.
    const componentInternalContext = {
        emit: (eventName, payload, eventInitDict = { bubbles: true }) => {
            eventInitDict.detail = payload

            const customEvent = new CustomEvent(eventName, eventInitDict)

            componentParentNode.dispatchEvent(customEvent)
        },
        ref: (value) => {
            return reactiveVariable(value, structuredClone(REACTIVE_VARIABLE_REF_CONFIG))
        },
        computed: (callback) => {
            return reactiveVariable(callback, structuredClone(REACTIVE_VARIABLE_COMPUTED_CONFIG))
        },
        stores: $VindEngine.stores,
        useRouter: () => {
            const routerStore = $VindEngine.stores.routerStore

            return routerStore
        },
        watch: (source, callback, watchConfiguration) => {
            const isSourceAReactiveVariable = source?.configuration?.isReactiveVariable
            const isSourceAFunction = typeof source === 'function'
            const isSourceAnArray = Array.isArray(source)

            if (!isSourceAReactiveVariable && !isSourceAFunction && !isSourceAnArray) return

            if (typeof source === 'function') {
                $VindEngine.dependencyExtractorRunning = true;

                const output = source()

                if ($VindEngine.extractedDependencies.size > 0) {
                    const extractedDependencies = Array.from($VindEngine.extractedDependencies);

                    if (extractedDependencies.length > 0) {
                        const [firstReferencedReference] = extractedDependencies

                        if (!firstReferencedReference) return

                        extractedDependencies.forEach((extractedDependency) => {
                            $VindEngine.watchCallbacks[extractedDependency].push(callback)
                        })
                    }

                    $VindEngine.extractedDependencies = new Set();
                }

                $VindEngine.dependencyExtractorRunning = false;


                if (watchConfiguration?.immediate) {
                    callback(output, output)
                }

                return
            }

            if (isSourceAnArray) {
                // in case if watch([a, b, c...])...
            }

            if (watchConfiguration?.immediate) {
                callback(source.value, source.value)
            }

            const variableReference = source.variableReference

            $VindEngine.watchCallbacks[variableReference].push(callback)
        },
        onMounted: (callback) => {
            lifecycleCallbacks.onMounted = callback
        },
        onBeforeMount: (callback) => {
            lifecycleCallbacks.onBeforeMount = callback
        },
        props: componentParentNode.$VindComponent.properties
    }

    // * Binding props and transforming them into reactive variables.
    let componentProperties = $VindEngine.propertiesByComponent[componentParentNode.tagName] || [] // *  - in case the parent node's tagName is 'DIV'.

    Object.entries(componentProperties).forEach(([propertyKey, propertyConfiguration]) => {
        const kebabCasedPropertyKey = camelToKebabCase(propertyKey)

        const attributeExpression = componentParentNode.getAttribute(`data-flow-attribute-original-content-${kebabCasedPropertyKey}`)

        const propertyReactiveVariable = reactiveVariable(undefined, structuredClone(REACTIVE_VARIABLE_PROP_CONFIG))

        properties[propertyKey] = propertyReactiveVariable

        $VindEngine.queueReactiveEffect({
            effect: () => {
                const evaluatedJSExpression = evaluateJSExpression(parentContext, attributeExpression)

                if (evaluatedJSExpression === null && (propertyConfiguration.required || typeof propertyConfiguration.required === 'undefined')) {
                    console.error(`Property "${propertyKey}" of component "${componentName}" is required but is either unused or null.`)
                }

                if (evaluatedJSExpression !== null && typeof evaluatedJSExpression !== propertyConfiguration.type) {
                    console.warn(`Type of passed ${propertyKey} property does not match the type defined in its configuration.`)
                }

                propertyReactiveVariable.value = evaluatedJSExpression || (propertyConfiguration?.default || evaluatedJSExpression);
            }
        })

        if ('default' in propertyConfiguration) {
            delete propertyConfiguration.default
        }
    })

    // * Calling a component function with the context methods. The component function returns a context object.
    // * It is fine to think of it as Vue's onCreated lifecycle hook.
    const stringifiedComponentFunction = componentFunction.toString()

    const evaluatedComponentFunction = evaluateJSExpression(componentInternalContext, stringifiedComponentFunction)

    const componentContext = Object.assign(properties, evaluatedComponentFunction())

    // * Setting properties on componentContext that can be later referenced in templates by preprending them with '$' sign.
    componentContext.$path = $VindEngine.stores.routerStore.path
    componentContext.$emit = (eventName) => () => componentInternalContext.emit(eventName)


    // * Setting componentParentNode's innerHTML to the component's template and removing the 'template' property.
    const componentTemplate = $VindEngine.templateByComponent[upperCaseComponentName] || ''

    // * Invoking onBeforeMount lifecycle hook if defined.
    lifecycleCallbacks.onBeforeMount?.()

    // * ! After running this instruction component gets its HTML content set.
    componentParentNode.innerHTML = replaceInterpolationMarkers(componentTemplate)

    const componentStyle = $VindEngine.styleByComponent[upperCaseComponentName] || ''

    // * Grabbing all inner elements of the componentParentNode that has just been created by innerHTML property.
    const componentNodeInnerElements = [...componentParentNode.querySelectorAll('*:not([data-flow-compiled-component])')]

    // * Formatting every inner node in order for easier manipulation.
    let mappedInnerNodes = componentNodeInnerElements.map((element) => {
        const attributes = [...element.attributes]

        return {
            element,
            attributes: getTranslatedAttributeNames(attributes)
        }
    })

    // * This is so-called "loop-marking". It is used to distinguish looped elements from the rest.
    // * This because loops are mounted separately from the rest of the component.
    const loopNodes = [...componentParentNode.querySelectorAll('Loop')]

    loopNodes.forEach(element => {
        const loopBlockElements = [...element.querySelectorAll('*')]

        loopBlockElements.forEach((loopBlockElement) => {
            loopBlockElement.setAttribute('data-flow-looped-element', true)
        })
    })

    // * Determining component drawers.
    const drawerNodes = [...componentParentNode.querySelectorAll('Drawer')]
    const mappedInnerDrawerTags = drawerNodes.map(drawerNode => {
        const drawerName = drawerNode.getAttribute("name")

        const targetInsertTag = componentParentNode.$VindComponent.mappedInnerInsertTags.find(insertTag => insertTag.name === drawerName)

        if (targetInsertTag) {
            drawerNode.prepend(targetInsertTag.insertNode)
        }

        return {
            element: drawerNode,
            name: drawerNode.getAttribute("name")
        }
    })

    componentParentNode.$VindComponent.mappedInnerDrawerTags = mappedInnerDrawerTags

    const componentNamesUsed = []

    // * The famous "mounting" step. This is where the magic happens.
    mappedInnerNodes.forEach((mappedInnerNode) => {
        const isComponentModule = $VindEngine.componentModules[mappedInnerNode.element.tagName]

        // * insertTags
        if (isComponentModule) {
            componentNamesUsed.push(mappedInnerNode.element.tagName)

            mappedInnerNode.element.$VindComponent = {}

            const insertTags = [...mappedInnerNode.element.querySelectorAll('Insert')]
            const mappedInnerInsertTags = insertTags.map(insertNode => {
                return {
                    componentNode: mappedInnerNode.element,
                    insertNode,
                    name: insertNode.getAttribute("name")
                }
            })

            mappedInnerNode.element.$VindComponent.mappedInnerInsertTags = mappedInnerInsertTags
        }

        // * eventAttributes
        // * Mounting event attributes that start with '@' character.
        mappedInnerNode.attributes.eventAttributes.forEach(({ name: eventAttribute, value }) => {
            const evaluatedCallaback = (event) => evaluateJSExpression(componentContext, value)?.(event)

            mappedInnerNode.element.addEventListener(translateEventAttribute(eventAttribute), evaluatedCallaback)
        })

        // * bindingAttributes
        // * Mounting binding attributes that start with ':' character.
        mappedInnerNode.attributes.bindingAttributes.forEach(({ name: bindingAttribute, value }) => {
            const translatedBindingAttribute = translateBindingAttribute(bindingAttribute)

            mappedInnerNode.element.setAttribute(`data-flow-attribute-original-content-${translatedBindingAttribute}`, value)

            // * Note: for loop is mounted separately from other elements and has its own mounting (copied) step.
            if (bindingAttribute === ':for') {
                bindForDirective(mappedInnerNode, componentContext)

                return
            }

            const isNodeNotAChildOfLoopElement = !mappedInnerNode.element.getAttribute('data-flow-looped-element')

            // * Mounting :if directive.
            if (isNodeNotAChildOfLoopElement) {
                if (bindingAttribute === ':if') {
                    bindIfDirective(mappedInnerNode, componentContext)

                    return
                }

                // * Mounting input elements' value and checked attributes.
                const inputTypes = ['checkbox', 'radio', 'text', 'number', 'password', 'email', 'url', 'tel', 'date', 'time', 'color', 'range'];

                inputTypes.forEach(inputType => {
                    const isNodeAInput =
                        mappedInnerNode.element.tagName === 'INPUT' &&
                        mappedInnerNode.element.getAttribute('type') === inputType;

                    if (isNodeAInput) {
                        $VindEngine.queueReactiveEffect({
                            effect: () => {
                                const condition = evaluateJSExpression(componentContext, value);

                                if (inputType === 'checkbox' || inputType === 'radio') {
                                    if (condition) {
                                        mappedInnerNode.element.setAttribute('checked', condition);
                                    } else {
                                        mappedInnerNode.element.removeAttribute('checked');
                                    }
                                } else if (inputType === 'text' || inputType === 'number' || inputType === 'password' || inputType === 'email' || inputType === 'url' || inputType === 'tel' || inputType === 'date' || inputType === 'time' || inputType === 'color' || inputType === 'range') {
                                    mappedInnerNode.element.setAttribute('value', condition);
                                }
                            }
                        });

                        return;
                    }
                });

                // * Mounting any other attribute that is not a directive.
                $VindEngine.queueReactiveEffect({
                    effect: () => {
                        const evaluatedExpression = evaluateJSExpression(componentContext, value)

                        mappedInnerNode.element.setAttribute(translatedBindingAttribute, evaluatedExpression)
                    }
                })
            }
        })
    })

    // * This is used to bind reactive variables to the DOM that are not part of a loop and evaluate expressions inside {{ }} delimiters
    const interpolationNodes = [...componentParentNode.querySelectorAll('vind-expression')].filter(element => !element.closest('Loop'))

    interpolationNodes.forEach(interpolationNode => {
        const expression = interpolationNode['data-vind-expression'] ??= interpolationNode.textContent

        const textNode = document.createTextNode('')

        interpolationNode.parentNode.insertBefore(textNode, interpolationNode)
        interpolationNode.parentNode.removeChild(interpolationNode)

        const effect = () => {
            textNode.textContent = evaluateJSExpression(componentContext, expression)
        }

        $VindEngine.queueReactiveEffect({
            effect
        })
    })

    // * Calling the onMounted lifecycle callback if it exists

    if (!$VindEngine.mountedStyleByComponent[upperCaseComponentName]) {
        mountStyling(componentStyle, upperCaseComponentName)

        $VindEngine.mountedStyleByComponent[upperCaseComponentName] = true
    }

    lifecycleCallbacks.onMounted?.()

    return { componentNodeReference: componentParentNode, componentNamesUsed, nextParentContext: componentContext }
}

export function templateCompiler(componentFunction, lookUpNode, parentContext, parentComponentName, defaultEntryPointId) {
    let componentNodes = []

    if (defaultEntryPointId) {
        const foundNodes = lookUpNode.querySelectorAll(defaultEntryPointId)

        componentNodes = foundNodes
    } else {
        const foundNodes = lookUpNode.querySelectorAll(`${parentComponentName}:not([data-flow-compiled-component])`)

        componentNodes = foundNodes
    }

    componentNodes = Array.from(componentNodes)

    componentNodes.forEach((componentNode) => {
        const { componentNodeReference, componentNamesUsed, nextParentContext } = compileComponent(componentFunction, componentNode, parentContext, parentComponentName)

        if (componentNamesUsed.includes(parentComponentName)) {
            throw new Error(`Component "${parentComponentName}" is referenced inside its body.`)
        }

        componentNode.setAttribute('data-flow-compiled-component', true)

        componentNode.prepend(...componentNodeReference.childNodes)

        componentNamesUsed.forEach(usedComponentName => {
            const componentModule = $VindEngine.componentModules[usedComponentName]

            if (!componentModule) return

            const { componentName: nextComponentName } = componentModule

            templateCompiler(componentModule.componentFunction, componentNode, nextParentContext, nextComponentName)
        })
    })
}