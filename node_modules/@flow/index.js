import { templateCompiler } from './src/templateCompiler.js'

export const Flow = {
    connect(callback) {
        callback()
    },
    mountStore(callback) {
        callback()
    },
    mount: templateCompiler
};

window.$Flow = (() => {
    const effects = [];
    const stores = []
    const components = {}
    const watchSignals = {}

    // ------------ EFFECTS ------------
    const queueEffect = (effectFragment) => {
        if (typeof effectFragment.effect === 'function') {
            effectFragment.effect()
        }

        effects.push(effectFragment)
    }

    const runEffects = ({ reference }) => {
        effects.forEach(({ references, effect }) => {
            references.forEach((effectReference) => {
                if (effectReference === reference && typeof effect === 'function') {
                    effect()
                }
            })
        })
    }

    const flushEffects = () => {
        effects.length = []
    }

    // ------------ STORE ------------
    const setStore = (name, store) => {
        stores.push({
            name,
            store
        })
    }

    const useStore = (storeName) => {
        const storeDefinition = stores.find(store => {
            return store.name === storeName
        })

        return storeDefinition.store
    }

    return {
        effects,
        stores,
        components,
        watchSignals,
        runEffects,
        flushEffects,
        queueEffect,
        setStore,
        useStore
    }
})()