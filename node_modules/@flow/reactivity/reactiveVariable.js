export function generateNewReference() {
    return `flow-rv-id-${String(Math.trunc(Math.random() * 100000000)).padEnd(16, '0')}-${String(Math.trunc(Math.random() * 100000000)).padEnd(16, '0')}`
}

export const createReactiveArray = (array, reference) => {
    return new Proxy(array, {
        get(target, property, receiver) {
            const propertyOrFunctionAccessed = Reflect.get(target, property, receiver);

            if (typeof propertyOrFunctionAccessed === 'function') {
                return function (...methodArguments) {
                    if (property === 'push' || property === 'unshift' || property === 'pop' || property === 'shift') {
                        requestAnimationFrame(() => {
                            $Flow.runEffects({ reference })
                        })
                    }

                    return propertyOrFunctionAccessed.apply(this, methodArguments);
                };
            }

            return propertyOrFunctionAccessed;
        },
        set(target, property, value, receiver) {
            return Reflect.set(target, property, value, receiver);
        },
        deleteProperty(target, property) {
            return Reflect.deleteProperty(target, property);
        }
    });
}

export const reactiveVariable = (value, configuration = {}) => {
    configuration.isReactiveVariable = true

    const variableReference = generateNewReference()

    $Flow.watchSignals[variableReference] ??= []

    return new Proxy({ value, configuration, variableReference }, {
        get(target, property) {
            const value = target[property]

            return typeof value === 'function' ? value() : value
        },
        set(target, property, newValue) {
            const oldValue = target[property]

            target[property] = newValue

            $Flow.watchSignals[variableReference].forEach(watchSignal => watchSignal(newValue, oldValue))

            $Flow.runEffects({ reference: variableReference, configuration })

            return true
        }
    })
}